{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-app\\\\workspace\\\\src\\\\GuGuDan.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GuGuDan = () => {\n  _s();\n\n  // 구조 분해 할당(Destructuring)\n  const [first, setFirst] = React.useState(Math.ceil(Math.random() * 9));\n  const [second, setSecond] = React.useState(Math.ceil(Math.random() * 9));\n  const [value, setValue] = React.useState('');\n  const [result, setResult] = React.useState(''); // ref\n\n  const inputRef = React.useRef(null);\n\n  const onChangeInput = e => {\n    setValue(e.target.value);\n  };\n\n  const onSubmitForm = e => {\n    e.preventDefault();\n\n    if (parseInt(this.state.value) === this.state.first * this.state.second) {\n      setResult('정답 : ' + value);\n      setFirst(Math.ceil(Math.random() * 9));\n      setSecond(Math.ceil(Math.random() * 9));\n      setValue('');\n    } else {\n      setResult('땡');\n      setValue('');\n    } // hooks에서 ref 사용\n\n\n    inputRef.current.focus();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [first, \" \\uACF1\\uD558\\uAE30 \", second, \" \\uB294?\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmitForm,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: onChangeInput,\n        value: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"\\uC785\\uB825\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"result\",\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n/*\r\nclass GuGuDan extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            first: Math.ceil(Math.random() * 9),\r\n            second: Math.ceil(Math.random() * 9),\r\n            value: '',\r\n            result: '',\r\n        }\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (parseInt(this.state.value) === this.state.first * this.state.second) {\r\n            this.setState((prevState) => {\r\n                // 이전의 값을 써야 할 때는\r\n                // setState가 비동기 인점을 감안해\r\n                // 예전 값을 인자로 받는 함수를 사용하는 방법을\r\n                // 사용해야 한다.\r\n                return {\r\n                    result: '정답 : ' + prevState.value,\r\n                    first: Math.ceil(Math.random() * 9),\r\n                    second: Math.ceil(Math.random() * 9),\r\n                    value: ''\r\n                }\r\n            });\r\n        } else {\r\n            this.setState({\r\n                result: '땡',\r\n                value: ''\r\n            });\r\n        }\r\n        // f-3. 해당 객체의 input에 focus()를 실행하면 focus가 된다.\r\n        this.input.focus();\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({ value: e.target.value });\r\n    }\r\n\r\n    // f-2. class내부에 선언해준 후\r\n    input;\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div>{this.state.first} 곱하기 {this.state.second}는?</div>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <input\r\n                        // f-1. focus를 사용하려고 하면\r\n                        ref={(c) => { this.input = c; }}\r\n                        type=\"number\"\r\n                        value={this.state.value}\r\n                        onChange={this.onChange}\r\n                    />\r\n                    <button>입력</button>\r\n                </form>\r\n                <div>{this.state.result}</div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n*/\n\n\n_s(GuGuDan, \"kkLcuNeZqOlEQnXK73Ds63iQ9Ow=\");\n\n_c = GuGuDan;\nexport default GuGuDan;\n\nvar _c;\n\n$RefreshReg$(_c, \"GuGuDan\");","map":{"version":3,"sources":["D:/react-app/workspace/src/GuGuDan.js"],"names":["React","Component","GuGuDan","first","setFirst","useState","Math","ceil","random","second","setSecond","value","setValue","result","setResult","inputRef","useRef","onChangeInput","e","target","onSubmitForm","preventDefault","parseInt","state","current","focus"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,KAAK,CAACK,QAAN,CAAeC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,CAA1B,CAAf,CAA1B;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,KAAK,CAACK,QAAN,CAAeC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,CAA1B,CAAf,CAA5B;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBZ,KAAK,CAACK,QAAN,CAAe,EAAf,CAA1B;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBd,KAAK,CAACK,QAAN,CAAe,EAAf,CAA5B,CALkB,CAMlB;;AACA,QAAMU,QAAQ,GAAGf,KAAK,CAACgB,MAAN,CAAa,IAAb,CAAjB;;AAEA,QAAMC,aAAa,GAAIC,CAAD,IAAO;AACzBN,IAAAA,QAAQ,CAACM,CAAC,CAACC,MAAF,CAASR,KAAV,CAAR;AACH,GAFD;;AAIA,QAAMS,YAAY,GAAIF,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACG,cAAF;;AACA,QAAIC,QAAQ,CAAC,KAAKC,KAAL,CAAWZ,KAAZ,CAAR,KAA+B,KAAKY,KAAL,CAAWpB,KAAX,GAAmB,KAAKoB,KAAL,CAAWd,MAAjE,EAAyE;AACrEK,MAAAA,SAAS,CAAC,UAAUH,KAAX,CAAT;AACAP,MAAAA,QAAQ,CAACE,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,CAA1B,CAAD,CAAR;AACAE,MAAAA,SAAS,CAACJ,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,CAA1B,CAAD,CAAT;AACAI,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,KALD,MAKO;AACHE,MAAAA,SAAS,CAAC,GAAD,CAAT;AACAF,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,KAVuB,CAWxB;;;AACAG,IAAAA,QAAQ,CAACS,OAAT,CAAiBC,KAAjB;AACH,GAbD;;AAcA,sBACI;AAAA,4BACI;AAAA,iBAAMtB,KAAN,0BAAkBM,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAM,MAAA,QAAQ,EAAEW,YAAhB;AAAA,8BACI;AAAO,QAAA,QAAQ,EAAEH,aAAjB;AAAgC,QAAA,KAAK,EAAEN;AAAvC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAMI;AAAK,MAAA,EAAE,EAAC,QAAR;AAAA,gBAAkBE;AAAlB;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA,kBADJ;AAWH,CAtCD;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GApGMX,O;;KAAAA,O;AAqGN,eAAeA,OAAf","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst GuGuDan = () => {\r\n    // 구조 분해 할당(Destructuring)\r\n    const [first, setFirst] = React.useState(Math.ceil(Math.random() * 9));\r\n    const [second, setSecond] = React.useState(Math.ceil(Math.random() * 9));\r\n    const [value, setValue] = React.useState('');\r\n    const [result, setResult] = React.useState('');\r\n    // ref\r\n    const inputRef = React.useRef(null);\r\n\r\n    const onChangeInput = (e) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const onSubmitForm = (e) => {\r\n        e.preventDefault();\r\n        if (parseInt(this.state.value) === this.state.first * this.state.second) {\r\n            setResult('정답 : ' + value);\r\n            setFirst(Math.ceil(Math.random() * 9));\r\n            setSecond(Math.ceil(Math.random() * 9));\r\n            setValue('');\r\n        } else {\r\n            setResult('땡');\r\n            setValue('');\r\n        }\r\n        // hooks에서 ref 사용\r\n        inputRef.current.focus();\r\n    }\r\n    return (\r\n        <>\r\n            <div>{first} 곱하기 {second} 는?</div>\r\n            <form onSubmit={onSubmitForm}>\r\n                <input onChange={onChangeInput} value={value} />\r\n                <button>입력</button>\r\n            </form>\r\n            <div id=\"result\">{result}</div>\r\n        </>\r\n    )\r\n\r\n}\r\n/*\r\nclass GuGuDan extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            first: Math.ceil(Math.random() * 9),\r\n            second: Math.ceil(Math.random() * 9),\r\n            value: '',\r\n            result: '',\r\n        }\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (parseInt(this.state.value) === this.state.first * this.state.second) {\r\n            this.setState((prevState) => {\r\n                // 이전의 값을 써야 할 때는\r\n                // setState가 비동기 인점을 감안해\r\n                // 예전 값을 인자로 받는 함수를 사용하는 방법을\r\n                // 사용해야 한다.\r\n                return {\r\n                    result: '정답 : ' + prevState.value,\r\n                    first: Math.ceil(Math.random() * 9),\r\n                    second: Math.ceil(Math.random() * 9),\r\n                    value: ''\r\n                }\r\n            });\r\n        } else {\r\n            this.setState({\r\n                result: '땡',\r\n                value: ''\r\n            });\r\n        }\r\n        // f-3. 해당 객체의 input에 focus()를 실행하면 focus가 된다.\r\n        this.input.focus();\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({ value: e.target.value });\r\n    }\r\n\r\n    // f-2. class내부에 선언해준 후\r\n    input;\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div>{this.state.first} 곱하기 {this.state.second}는?</div>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <input\r\n                        // f-1. focus를 사용하려고 하면\r\n                        ref={(c) => { this.input = c; }}\r\n                        type=\"number\"\r\n                        value={this.state.value}\r\n                        onChange={this.onChange}\r\n                    />\r\n                    <button>입력</button>\r\n                </form>\r\n                <div>{this.state.result}</div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n*/\r\nexport default GuGuDan;"]},"metadata":{},"sourceType":"module"}