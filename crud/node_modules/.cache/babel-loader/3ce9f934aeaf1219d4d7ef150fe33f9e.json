{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-app\\\\workspace\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Subject from \"./components/Subject\";\nimport TOC from \"./components/TOC\";\nimport ReadContent from \"./components/ReadContent\";\nimport CreateContent from \"./components/CreateContent\";\nimport UpdateContent from \"./components/UpdateContent\";\nimport Control from \"./components/Control\";\nimport './App.css'; // 리턴되는 것은 최상위 노드는 항상 하나만 존재해야한다.\n// App이라는 클래스 내부에서 사용할 정보들은 state로써 저장한다\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.max_content_id = 3;\n    this.state = {\n      mode: 'welcome',\n      selected_content_id: 2,\n      subject: {\n        title: 'WEB',\n        sub: 'world wide web'\n      },\n      welcome: {\n        title: 'Welcome',\n        desc: 'Hello, React!!'\n      },\n      contents: [{\n        id: 1,\n        title: 'HTML',\n        desc: 'HTML is for information'\n      }, {\n        id: 2,\n        title: 'CSS',\n        desc: 'CSS is for design'\n      }, {\n        id: 3,\n        title: 'JavaScript',\n        desc: 'JavaScript is for interactive'\n      }]\n    };\n  }\n\n  getReadContent() {\n    // this.state.contents.forEach(content => {\n    //   if (content.id === this.state.selected_content_id) {\n    //     return content;\n    //   }\n    // })\n    var i = 0;\n\n    while (i < this.state.contents.length) {\n      var data = this.state.contents[i];\n\n      if (data.id === this.state.selected_content_id) {\n        return data;\n      }\n\n      i += 1;\n    }\n  }\n\n  getContent() {\n    var _title,\n        _desc,\n        _article = null;\n\n    if (this.state.mode === 'welcome') {\n      _title = this.state.welcome.title;\n      _desc = this.state.welcome.desc;\n      _article = /*#__PURE__*/_jsxDEV(ReadContent, {\n        title: _title,\n        desc: _desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 18\n      }, this);\n    } else if (this.state.mode === 'read') {\n      var _content = this.getReadContent();\n\n      _article = /*#__PURE__*/_jsxDEV(ReadContent, {\n        title: _content.title,\n        desc: _content.desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 18\n      }, this);\n    } else if (this.state.mode === 'create') {\n      _article = /*#__PURE__*/_jsxDEV(CreateContent, {\n        onSubmit: function (_title, _desc) {\n          this.max_content_id += 1; // 기존 state를 직접적으로 변경하는 것보단\n          // 기존에 새로운 데이터를 추가한 데이터를 반환받아 사용하는 것이 좋다.\n\n          var _contents = this.state.contents.concat({\n            id: this.max_content_id,\n            title: _title,\n            desc: _desc\n          });\n\n          this.setState({\n            contents: _contents,\n            mode: 'read',\n            selected_content_id: this.max_content_id\n          });\n        }.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 18\n      }, this);\n    } else if (this.state.mode === 'update') {\n      _content = this.getReadContent();\n      _article = /*#__PURE__*/_jsxDEV(UpdateContent, {\n        data: _content,\n        onSubmit: function (_id, _title, _desc) {\n          var _contents = Array.from(this.state.contents);\n\n          var i = 0;\n\n          while (i < _contents.length) {\n            if (_contents[i].id === _id) {\n              _contents[i] = {\n                id: _id,\n                title: _title,\n                desc: _desc\n              };\n              break;\n            }\n\n            i += 1;\n          }\n\n          this.setState({\n            contents: _contents,\n            mode: 'read'\n          });\n        }.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 18\n      }, this);\n    }\n\n    return _article;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Subject, {\n        title: this.state.subject.title,\n        sub: this.state.subject.sub,\n        onChangePage: function () {\n          this.setState({\n            mode: 'welcome'\n          });\n        }.bind(this) // 사용자 정의 이벤트 설치  \n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TOC, {\n        onChangePage: function (id) {\n          this.setState({\n            mode: 'read',\n            selected_content_id: Number(id)\n          });\n        }.bind(this),\n        data: this.state.contents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Control, {\n        onChangeMode: function (_mode) {\n          if (_mode === 'delete') {\n            if (window.confirm(\"삭제 하시겠습니까?\")) {\n              var _contents = Array.from(this.state.contents);\n\n              var i = 0;\n\n              while (i < _contents.length) {\n                if (_contents[i].id === this.state.selected_content_id) {\n                  _contents.splice(i, 1);\n\n                  break;\n                }\n\n                i += 1;\n              }\n\n              this.setState({\n                contents: _contents\n              });\n            }\n          } else {\n            this.setState({\n              mode: _mode\n            });\n          }\n        }.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), this.getContent()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/react-app/workspace/src/App.js"],"names":["React","Component","Subject","TOC","ReadContent","CreateContent","UpdateContent","Control","App","constructor","props","max_content_id","state","mode","selected_content_id","subject","title","sub","welcome","desc","contents","id","getReadContent","i","length","data","getContent","_title","_desc","_article","_content","_contents","concat","setState","bind","_id","Array","from","render","Number","_mode","window","confirm","splice"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Subject from \"./components/Subject\"\nimport TOC from \"./components/TOC\"\nimport ReadContent from \"./components/ReadContent\"\nimport CreateContent from \"./components/CreateContent\"\nimport UpdateContent from \"./components/UpdateContent\"\nimport Control from \"./components/Control\"\nimport './App.css';\n\n// 리턴되는 것은 최상위 노드는 항상 하나만 존재해야한다.\n// App이라는 클래스 내부에서 사용할 정보들은 state로써 저장한다\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.max_content_id = 3;\n    this.state = {\n      mode: 'welcome',\n      selected_content_id: 2,\n      subject: { title: 'WEB', sub: 'world wide web' },\n      welcome: { title: 'Welcome', desc: 'Hello, React!!' },\n      contents: [\n        { id: 1, title: 'HTML', desc: 'HTML is for information' },\n        { id: 2, title: 'CSS', desc: 'CSS is for design' },\n        { id: 3, title: 'JavaScript', desc: 'JavaScript is for interactive' }\n      ]\n    }\n  }\n  getReadContent() {\n    // this.state.contents.forEach(content => {\n    //   if (content.id === this.state.selected_content_id) {\n    //     return content;\n    //   }\n    // })\n    var i = 0;\n    while (i < this.state.contents.length) {\n      var data = this.state.contents[i]\n      if (data.id === this.state.selected_content_id) {\n        return data;\n      }\n      i += 1;\n    }\n  }\n  getContent() {\n    var _title, _desc, _article = null;\n    if (this.state.mode === 'welcome') {\n      _title = this.state.welcome.title\n      _desc = this.state.welcome.desc;\n      _article = <ReadContent title={_title} desc={_desc}></ReadContent>\n    } else if (this.state.mode === 'read') {\n      var _content = this.getReadContent();\n      _article = <ReadContent title={_content.title} desc={_content.desc}></ReadContent>\n\n    } else if (this.state.mode === 'create') {\n      _article = <CreateContent onSubmit={function (_title, _desc) {\n        this.max_content_id += 1;\n        // 기존 state를 직접적으로 변경하는 것보단\n        // 기존에 새로운 데이터를 추가한 데이터를 반환받아 사용하는 것이 좋다.\n        var _contents = this.state.contents.concat(\n          { id: this.max_content_id, title: _title, desc: _desc }\n        );\n        this.setState({\n          contents: _contents,\n          mode: 'read',\n          selected_content_id: this.max_content_id\n        });\n      }.bind(this)}></CreateContent>\n    } else if (this.state.mode === 'update') {\n      _content = this.getReadContent();\n      _article = <UpdateContent data={_content} onSubmit={function (_id, _title, _desc) {\n        var _contents = Array.from(this.state.contents);\n        var i = 0;\n        while (i < _contents.length) {\n          if (_contents[i].id === _id) {\n            _contents[i] = { id: _id, title: _title, desc: _desc };\n            break;\n          }\n          i += 1;\n        }\n        this.setState({\n          contents: _contents,\n          mode: 'read'\n        });\n      }.bind(this)}></UpdateContent>\n    }\n    return _article;\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Subject\n          title={this.state.subject.title}\n          sub={this.state.subject.sub}\n          onChangePage={function () {\n            this.setState({ mode: 'welcome' });\n          }.bind(this)}\n        // 사용자 정의 이벤트 설치  \n        ></Subject>\n        <TOC\n          onChangePage={function (id) {\n            this.setState({\n              mode: 'read',\n              selected_content_id: Number(id)\n            })\n          }.bind(this)}\n          data={this.state.contents}\n        ></TOC >\n        <Control onChangeMode={function (_mode) {\n          if (_mode === 'delete') {\n            if (window.confirm(\"삭제 하시겠습니까?\")) {\n              var _contents = Array.from(this.state.contents);\n              var i = 0;\n              while (i < _contents.length) {\n                if (_contents[i].id === this.state.selected_content_id) {\n                  _contents.splice(i, 1);\n                  break;\n                }\n                i += 1;\n              }\n              this.setState({\n                contents: _contents\n              });\n            }\n          } else {\n            this.setState({\n              mode: _mode\n            });\n          }\n        }.bind(this)}></Control>\n        {this.getContent()}\n      </div >\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}